{
  "id": "101b99ae-1cea-80b2-8861-c6639da890ea",
  "title": "游戏服务器性能优化之程序优化篇",
  "date": "2021-11-05",
  "tags": [],
  "status": "Published",
  "type": "Post",
  "category": "技术分享",
  "slug": "invisible",
  "summary": "游戏服务器性能优化之程序优化篇",
  "created_time": "2024-09-14T07:12:00.000Z",
  "last_edited_time": "2024-09-14T07:56:00.000Z",
  "cover": {
    "type": "external",
    "external": {
      "url": "https://www.notion.so/images/page-cover/woodcuts_5.jpg"
    }
  },
  "coverImageFilename": "cover_aHR0cHM6_woodcuts_5.jpg",
  "blocks": [
    {
      "object": "block",
      "id": "ee816167-81bf-4fda-a1c7-5099daa68c0c",
      "parent": {
        "type": "page_id",
        "page_id": "101b99ae-1cea-80b2-8861-c6639da890ea"
      },
      "created_time": "2024-09-14T07:12:00.000Z",
      "last_edited_time": "2024-09-14T07:49:00.000Z",
      "created_by": {
        "object": "user",
        "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
      },
      "last_edited_by": {
        "object": "user",
        "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
      },
      "has_children": true,
      "archived": false,
      "in_trash": false,
      "type": "synced_block",
      "synced_block": {
        "synced_from": null
      },
      "children": [
        {
          "object": "block",
          "id": "101b99ae-1cea-8086-b46d-ffbdbfa60b1b",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "paragraph",
          "paragraph": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "游戏服务器的性能除了依赖于良好的架构设计和高效的数据存取,还与具体的程序实现密切相关。本文将重点探讨游戏服务器程序优化的一些常见问题和优化技巧。",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "游戏服务器的性能除了依赖于良好的架构设计和高效的数据存取,还与具体的程序实现密切相关。本文将重点探讨游戏服务器程序优化的一些常见问题和优化技巧。",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "f5e06eb2-7acd-4dff-aa28-635639ca791b",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "paragraph",
          "paragraph": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "一、内存管理",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "一、内存管理",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-80ee-929f-c85da8fbfbdc",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "paragraph",
          "paragraph": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "游戏服务器通常需要处理大量的并发请求和数据,内存很容易成为性能瓶颈。高效的内存管理可以减少内存泄漏和碎片化问题,降低GC压力,提高系统的吞吐量和响应速度。",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "游戏服务器通常需要处理大量的并发请求和数据,内存很容易成为性能瓶颈。高效的内存管理可以减少内存泄漏和碎片化问题,降低GC压力,提高系统的吞吐量和响应速度。",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-80d1-b3e2-c124fc963566",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "paragraph",
          "paragraph": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "常见的内存管理问题有以下几种:",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "常见的内存管理问题有以下几种:",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-80d9-866e-e3810791749d",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "内存泄漏:程序在运行过程中不断分配内存,却没有及时释放不再使用的内存,导致可用内存逐渐减少,最终引发OOM(Out of Memory)错误。",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "内存泄漏:程序在运行过程中不断分配内存,却没有及时释放不再使用的内存,导致可用内存逐渐减少,最终引发OOM(Out of Memory)错误。",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-80d3-be2e-cfdb53806e93",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "内存碎片化:频繁地分配和释放不同大小的内存块,导致内存空间出现很多碎片,无法分配出连续的大块内存。",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "内存碎片化:频繁地分配和释放不同大小的内存块,导致内存空间出现很多碎片,无法分配出连续的大块内存。",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "dac8bc63-155e-4e46-94ec-6f7979d39431",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "内存抖动:短时间内大量分配和释放内存,导致GC频繁触发,系统性能出现波动。",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "内存抖动:短时间内大量分配和释放内存,导致GC频繁触发,系统性能出现波动。",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "2d3afe71-d2cc-477a-9d7e-0a7d6f154ce8",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "paragraph",
          "paragraph": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "内存泄漏的定位可以使用一些专业的工具如Valgrind、MAT等。对于Java程序,常见的内存泄漏场景有:",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "内存泄漏的定位可以使用一些专业的工具如Valgrind、MAT等。对于Java程序,常见的内存泄漏场景有:",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-8024-adc1-e422596f6f66",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "长生命周期的对象引用了短生命周期的对象,导致短生命周期对象无法被GC回收",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "长生命周期的对象引用了短生命周期的对象,导致短生命周期对象无法被GC回收",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-8050-b5ec-c376b568c659",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "静态集合类引用了实例对象,实例对象无法被GC回收",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "静态集合类引用了实例对象,实例对象无法被GC回收",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-80bd-8d46-f082f5b029c7",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "各种连接(如数据库连接、网络连接)没有显式关闭,连接对象无法被GC回收",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "各种连接(如数据库连接、网络连接)没有显式关闭,连接对象无法被GC回收",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-8029-8fce-df95670d71a6",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "监听器注册后没有反注册,监听器对象无法被GC回收",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "监听器注册后没有反注册,监听器对象无法被GC回收",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-80aa-a4b5-c98853d27e52",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "paragraph",
          "paragraph": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "合理的内存管理实践包括:",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "合理的内存管理实践包括:",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-80cb-a529-c482683cf3e0",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "尽量复用对象,避免频繁创建和销毁",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "尽量复用对象,避免频繁创建和销毁",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "8ff00873-eff9-47d5-81e8-4d885ea09fdf",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "对象池化,将频繁使用的对象缓存起来重复利用",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "对象池化,将频繁使用的对象缓存起来重复利用",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "a4f701b9-1c3e-430b-92fb-7339c711b818",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "数据结构优化,选择合适的数据结构降低内存占用",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "数据结构优化,选择合适的数据结构降低内存占用",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-806d-bda0-d787f81962a6",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "字符串拼接优化,使用StringBuilder避免创建大量临时字符串对象",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "字符串拼接优化,使用StringBuilder避免创建大量临时字符串对象",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "456a27c2-a920-4a1b-8814-0dd477a70257",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "显式内存回收,对于一些占用内存比较大的临时对象,使用后立即释放其内存引用",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "显式内存回收,对于一些占用内存比较大的临时对象,使用后立即释放其内存引用",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-806a-bda1-cc3b8a25b67e",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "paragraph",
          "paragraph": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "二、并发优化",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "二、并发优化",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "10d31e5b-0137-4aaf-83f0-bfe016d1571b",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "paragraph",
          "paragraph": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "游戏服务器高并发的请求处理是提升系统吞吐量的关键。服务器程序应充分利用多核CPU,合理设置线程池参数,避免线程的上下文切换开销,减少锁竞争和阻塞等待时间。",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "游戏服务器高并发的请求处理是提升系统吞吐量的关键。服务器程序应充分利用多核CPU,合理设置线程池参数,避免线程的上下文切换开销,减少锁竞争和阻塞等待时间。",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-8005-9b1b-c26180651277",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "paragraph",
          "paragraph": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "常用的并发编程模型有以下几种:",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "常用的并发编程模型有以下几种:",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-8091-882a-e6d61e8fb77d",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "多线程:为每个请求分配一个独立的处理线程,适合CPU密集型任务",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "多线程:为每个请求分配一个独立的处理线程,适合CPU密集型任务",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-8091-94cd-f6832a9c6086",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "Reactor:单线程处理所有请求的多路复用,将I/O事件分发给对应的处理器,适合I/O密集型任务",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "Reactor:单线程处理所有请求的多路复用,将I/O事件分发给对应的处理器,适合I/O密集型任务",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "84751665-c9bd-4086-a82a-afcc2cf94f82",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "Actor:将请求封装成消息,由独立的Actor顺序处理,适合有状态的任务",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "Actor:将请求封装成消息,由独立的Actor顺序处理,适合有状态的任务",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-8075-9e65-c83f5d4091d3",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "Coroutine:在用户态实现的轻量级线程,可以在单线程内实现高并发,避免了线程切换开销",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "Coroutine:在用户态实现的轻量级线程,可以在单线程内实现高并发,避免了线程切换开销",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-80b1-a97d-fe99b1cdc6f0",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "paragraph",
          "paragraph": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "除了选择合适的并发模型外,还需要注意以下几点:",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "除了选择合适的并发模型外,还需要注意以下几点:",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-8046-a045-c406717e9a3b",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "线程安全:对共享数据的并发访问要进行必要的同步,避免竞态条件",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "线程安全:对共享数据的并发访问要进行必要的同步,避免竞态条件",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-80c1-9aba-e4de9cfa0582",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "避免阻塞:尽量使用非阻塞I/O,避免同步I/O的阻塞等待",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "避免阻塞:尽量使用非阻塞I/O,避免同步I/O的阻塞等待",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-804a-bd07-c3a8fa233c24",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "减少锁竞争:使用细粒度的锁,避免不必要的锁竞争;使用无锁数据结构如ConcurrentHashMap",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "减少锁竞争:使用细粒度的锁,避免不必要的锁竞争;使用无锁数据结构如ConcurrentHashMap",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-8024-b5df-fa4558809f0e",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "提高并行度:将独立的任务拆分到不同的线程或进程,充分利用多核资源",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "提高并行度:将独立的任务拆分到不同的线程或进程,充分利用多核资源",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-802c-862a-d8c606ffaff3",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "paragraph",
          "paragraph": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "三、性能分析与调优",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "三、性能分析与调优",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-80c2-a130-d9e3be32f7f0",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "paragraph",
          "paragraph": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "游戏服务器的性能问题通常表现为响应时间长、吞吐量低、资源占用高等。系统的性能调优需要经过性能测试、瓶颈定位、优化方案设计、效果评估等环节。",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "游戏服务器的性能问题通常表现为响应时间长、吞吐量低、资源占用高等。系统的性能调优需要经过性能测试、瓶颈定位、优化方案设计、效果评估等环节。",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-8013-84c7-e740b5928378",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "paragraph",
          "paragraph": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "对于C++开发的游戏服务器,常用的性能分析工具有:",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "对于C++开发的游戏服务器,常用的性能分析工具有:",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-8072-838c-c12770133744",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "Valgrind:一款用于内存调试、内存泄漏检测以及性能分析的软件开发工具。它包含了多个子工具,如用于内存错误检测的Memcheck,性能分析的Callgrind等。",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "Valgrind:一款用于内存调试、内存泄漏检测以及性能分析的软件开发工具。它包含了多个子工具,如用于内存错误检测的Memcheck,性能分析的Callgrind等。",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-80f9-b59f-d42b2f24404a",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "Google Performance Tools:Google开发的一款工具软件,包含多个小工具如 TCMalloc(Thread-Caching Malloc) 用于内存分配及管理,CPU Profiler用于CPU性能分析,Heap Profiler用于堆内存分析等。",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "Google Performance Tools:Google开发的一款工具软件,包含多个小工具如 TCMalloc(Thread-Caching Malloc) 用于内存分配及管理,CPU Profiler用于CPU性能分析,Heap Profiler用于堆内存分析等。",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "4e39cadc-ab08-42ba-a12a-1af0064c9990",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "gperftools:是 Google Performance Tools 的开源实现,提供了一系列的性能分析工具,如性能统计、CPU剖析、内存剖析等功能。",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "gperftools:是 Google Performance Tools 的开源实现,提供了一系列的性能分析工具,如性能统计、CPU剖析、内存剖析等功能。",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-800c-ab4d-ea80ae0aa922",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "Nginx-systemtap-toolkit:一个开源工具集,用于Nginx服务器的性能实时分析和监控,当然,它也适用于其他C/C++应用程序。",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "Nginx-systemtap-toolkit:一个开源工具集,用于Nginx服务器的性能实时分析和监控,当然,它也适用于其他C/C++应用程序。",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "95467592-dd81-49a4-85f7-aeb721f0f4a4",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "Flame Graph:由 Brendan Gregg 开发的一款可视化分析工具,非常适用于 C/C++ 程序的 CPU 性能分析,它可以生成直观的火焰图来展示函数的调用关系及CPU使用情况。",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "Flame Graph:由 Brendan Gregg 开发的一款可视化分析工具,非常适用于 C/C++ 程序的 CPU 性能分析,它可以生成直观的火焰图来展示函数的调用关系及CPU使用情况。",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "22c737a9-a59f-4326-af3f-f9acdba019bf",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "Perf:Linux内核自带的性能分析工具,它以性能事件采样为基础,不仅可以分析系统的各种事件和内核性能,还可以用来分析指定应用程序的性能问题。",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "Perf:Linux内核自带的性能分析工具,它以性能事件采样为基础,不仅可以分析系统的各种事件和内核性能,还可以用来分析指定应用程序的性能问题。",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "3a92410f-a342-4eff-b985-c2a4e47db910",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "Gprof:GNU binutils工具集中的性能分析工具,可以根据应用程序的特定事件来采样,并生成分析报告,报告内容包括每个函数的调用次数、函数执行时间等。",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "Gprof:GNU binutils工具集中的性能分析工具,可以根据应用程序的特定事件来采样,并生成分析报告,报告内容包括每个函数的调用次数、函数执行时间等。",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "89aa624d-ed4a-4ab3-aa57-a6f66ec2eff2",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "paragraph",
          "paragraph": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "服务器性能问题通常可以从以下几个方面入手优化:",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "服务器性能问题通常可以从以下几个方面入手优化:",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "13508618-d411-4714-93ef-654b33e9a337",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "算法与数据结构:选择时间复杂度低的算法,使用合适的数据结构提高存取效率",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "算法与数据结构:选择时间复杂度低的算法,使用合适的数据结构提高存取效率",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-80ac-a055-fe00b07d2a68",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "异步化:将串行的阻塞调用改为并行的异步调用,提高系统的并发度",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "异步化:将串行的阻塞调用改为并行的异步调用,提高系统的并发度",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-800e-841b-d26ab0e28973",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "缓存:将不易变的、访问频繁的数据缓存在内存中,减少磁盘和网络I/O",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "缓存:将不易变的、访问频繁的数据缓存在内存中,减少磁盘和网络I/O",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-80ec-aa8f-ec266cc0573e",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "数据压缩:对传输的数据进行压缩,减少网络带宽占用",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "数据压缩:对传输的数据进行压缩,减少网络带宽占用",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "d402647e-ab0b-4e9c-ae29-ba08aa85018d",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "消息中间件:使用消息队列异步解耦生产者和消费者,削峰填谷",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "消息中间件:使用消息队列异步解耦生产者和消费者,削峰填谷",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-804c-875a-f2dbfaa7378f",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "垂直扩展:提高单机配置如CPU、内存等,充分发挥单机的性能",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "垂直扩展:提高单机配置如CPU、内存等,充分发挥单机的性能",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-8043-8f57-e987e6199ed2",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "水平扩展:增加服务器数量,使用负载均衡技术分摊请求压力",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "水平扩展:增加服务器数量,使用负载均衡技术分摊请求压力",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "432b48cf-9ce4-4f99-8cfd-3527d562139c",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "paragraph",
          "paragraph": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "四、代码优化实践",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "四、代码优化实践",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-805c-8933-d6e68dab86d5",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "paragraph",
          "paragraph": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "除了架构层面的优化,游戏服务器的代码质量也直接影响着系统性能。需要开发者提高代码的质量意识,并掌握必要的代码优化技巧。一些好的实践包括:",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "除了架构层面的优化,游戏服务器的代码质量也直接影响着系统性能。需要开发者提高代码的质量意识,并掌握必要的代码优化技巧。一些好的实践包括:",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-80f2-a9ac-d9ba8ba9eabb",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "复杂度控制:控制函数的代码行数、分支数,降低圈复杂度,提高代码的可读性和可维护性",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "复杂度控制:控制函数的代码行数、分支数,降低圈复杂度,提高代码的可读性和可维护性",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "6b6bd4d6-1be2-48a5-a27b-1a29440d22b4",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "编码规范:统一的编码规范有助于避免潜在的性能问题,如尽量在循环体外进行内存分配,避免频繁申请和释放内存",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "编码规范:统一的编码规范有助于避免潜在的性能问题,如尽量在循环体外进行内存分配,避免频繁申请和释放内存",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "1efe9646-1a46-4140-80eb-8f551444ba6c",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "内存管理:尽量避免内存泄漏,及时释放不再使用的内存;对于频繁使用的对象,考虑使用内存池避免频繁分配和释放",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "内存管理:尽量避免内存泄漏,及时释放不再使用的内存;对于频繁使用的对象,考虑使用内存池避免频繁分配和释放",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-80c5-8b39-d42488c0ddd4",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "局部变量:尽量使用局部变量,避免多次访问类的属性",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "局部变量:尽量使用局部变量,避免多次访问类的属性",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-8085-a214-ef871ff58e75",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "位运算:使用位运算代替乘除法,如用 x>>1 代替 x/2",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "位运算:使用位运算代替乘除法,如用 x>>1 代替 x/2",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "37ca7866-3089-4161-b079-e1ebceab93da",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "inline内联函数:对于一些简短的、频繁调用的函数,考虑使用inline内联优化,减少函数调用开销",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "inline内联函数:对于一些简短的、频繁调用的函数,考虑使用inline内联优化,减少函数调用开销",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-8083-ac5b-f7ab52f2c09f",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "基本类型传参:对于一些内置的基本类型如int、double等,尽量通过值传参,而不是const引用,避免引用解引用的开销",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "基本类型传参:对于一些内置的基本类型如int、double等,尽量通过值传参,而不是const引用,避免引用解引用的开销",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-8058-a654-c4e075d9ae26",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "IO优化:使用缓冲区读写数据,避免频繁的IO系统调用;考虑使用内存映射文件等技术,提高文件读写效率",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "IO优化:使用缓冲区读写数据,避免频繁的IO系统调用;考虑使用内存映射文件等技术,提高文件读写效率",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "68c6b747-ea11-4c0a-895f-332fdebf89d1",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "numbered_list_item",
          "numbered_list_item": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "STL容器:慎重选择STL容器,如 map 的查找效率高但插入删除效率低,vector 的随机存取效率高但插入删除效率低,根据实际需求选择",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "STL容器:慎重选择STL容器,如 map 的查找效率高但插入删除效率低,vector 的随机存取效率高但插入删除效率低,根据实际需求选择",
                "href": null
              }
            ],
            "color": "default"
          }
        },
        {
          "object": "block",
          "id": "101b99ae-1cea-8071-8024-c6cb154d2f6c",
          "parent": {
            "type": "block_id",
            "block_id": "ee816167-81bf-4fda-a1c7-5099daa68c0c"
          },
          "created_time": "2024-09-14T07:49:00.000Z",
          "last_edited_time": "2024-09-14T07:49:00.000Z",
          "created_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "last_edited_by": {
            "object": "user",
            "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
          },
          "has_children": false,
          "archived": false,
          "in_trash": false,
          "type": "paragraph",
          "paragraph": {
            "rich_text": [
              {
                "type": "text",
                "text": {
                  "content": "总之,游戏服务器性能优化需要开发者、架构师、运维等各方通力合作,从代码、架构、系统、网络等各个层面入手,不断评估和改进。只有建立科学的性能优化流程,运用各种优化工具和经验,才能实现服务器的高性能和高可用。对于C++开发的服务器程序,还需要特别注意内存管理、异常处理等方面的问题,规范化的工程实践也是保证高性能的重要基础。",
                  "link": null
                },
                "annotations": {
                  "bold": false,
                  "italic": false,
                  "strikethrough": false,
                  "underline": false,
                  "code": false,
                  "color": "default"
                },
                "plain_text": "总之,游戏服务器性能优化需要开发者、架构师、运维等各方通力合作,从代码、架构、系统、网络等各个层面入手,不断评估和改进。只有建立科学的性能优化流程,运用各种优化工具和经验,才能实现服务器的高性能和高可用。对于C++开发的服务器程序,还需要特别注意内存管理、异常处理等方面的问题,规范化的工程实践也是保证高性能的重要基础。",
                "href": null
              }
            ],
            "color": "default"
          }
        }
      ]
    },
    {
      "object": "block",
      "id": "101b99ae-1cea-8070-86a0-ed808d447ed9",
      "parent": {
        "type": "page_id",
        "page_id": "101b99ae-1cea-80b2-8861-c6639da890ea"
      },
      "created_time": "2024-09-14T07:49:00.000Z",
      "last_edited_time": "2024-09-14T07:49:00.000Z",
      "created_by": {
        "object": "user",
        "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
      },
      "last_edited_by": {
        "object": "user",
        "id": "80a8a328-0748-4dd6-925e-6865939d4ae0"
      },
      "has_children": false,
      "archived": false,
      "in_trash": false,
      "type": "paragraph",
      "paragraph": {
        "rich_text": [],
        "color": "default"
      }
    }
  ],
  "contentHtml": "<div class=\"unsupported-block\">[synced_block]</div><p>游戏服务器的性能除了依赖于良好的架构设计和高效的数据存取,还与具体的程序实现密切相关。本文将重点探讨游戏服务器程序优化的一些常见问题和优化技巧。</p><p>一、内存管理</p><p>游戏服务器通常需要处理大量的并发请求和数据,内存很容易成为性能瓶颈。高效的内存管理可以减少内存泄漏和碎片化问题,降低GC压力,提高系统的吞吐量和响应速度。</p><p>常见的内存管理问题有以下几种:</p><li>内存泄漏:程序在运行过程中不断分配内存,却没有及时释放不再使用的内存,导致可用内存逐渐减少,最终引发OOM(Out of Memory)错误。</li><li>内存碎片化:频繁地分配和释放不同大小的内存块,导致内存空间出现很多碎片,无法分配出连续的大块内存。</li><li>内存抖动:短时间内大量分配和释放内存,导致GC频繁触发,系统性能出现波动。</li><p>内存泄漏的定位可以使用一些专业的工具如Valgrind、MAT等。对于Java程序,常见的内存泄漏场景有:</p><li>长生命周期的对象引用了短生命周期的对象,导致短生命周期对象无法被GC回收</li><li>静态集合类引用了实例对象,实例对象无法被GC回收</li><li>各种连接(如数据库连接、网络连接)没有显式关闭,连接对象无法被GC回收</li><li>监听器注册后没有反注册,监听器对象无法被GC回收</li><p>合理的内存管理实践包括:</p><li>尽量复用对象,避免频繁创建和销毁</li><li>对象池化,将频繁使用的对象缓存起来重复利用</li><li>数据结构优化,选择合适的数据结构降低内存占用</li><li>字符串拼接优化,使用StringBuilder避免创建大量临时字符串对象</li><li>显式内存回收,对于一些占用内存比较大的临时对象,使用后立即释放其内存引用</li><p>二、并发优化</p><p>游戏服务器高并发的请求处理是提升系统吞吐量的关键。服务器程序应充分利用多核CPU,合理设置线程池参数,避免线程的上下文切换开销,减少锁竞争和阻塞等待时间。</p><p>常用的并发编程模型有以下几种:</p><li>多线程:为每个请求分配一个独立的处理线程,适合CPU密集型任务</li><li>Reactor:单线程处理所有请求的多路复用,将I/O事件分发给对应的处理器,适合I/O密集型任务</li><li>Actor:将请求封装成消息,由独立的Actor顺序处理,适合有状态的任务</li><li>Coroutine:在用户态实现的轻量级线程,可以在单线程内实现高并发,避免了线程切换开销</li><p>除了选择合适的并发模型外,还需要注意以下几点:</p><li>线程安全:对共享数据的并发访问要进行必要的同步,避免竞态条件</li><li>避免阻塞:尽量使用非阻塞I/O,避免同步I/O的阻塞等待</li><li>减少锁竞争:使用细粒度的锁,避免不必要的锁竞争;使用无锁数据结构如ConcurrentHashMap</li><li>提高并行度:将独立的任务拆分到不同的线程或进程,充分利用多核资源</li><p>三、性能分析与调优</p><p>游戏服务器的性能问题通常表现为响应时间长、吞吐量低、资源占用高等。系统的性能调优需要经过性能测试、瓶颈定位、优化方案设计、效果评估等环节。</p><p>对于C++开发的游戏服务器,常用的性能分析工具有:</p><li>Valgrind:一款用于内存调试、内存泄漏检测以及性能分析的软件开发工具。它包含了多个子工具,如用于内存错误检测的Memcheck,性能分析的Callgrind等。</li><li>Google Performance Tools:Google开发的一款工具软件,包含多个小工具如 TCMalloc(Thread-Caching Malloc) 用于内存分配及管理,CPU Profiler用于CPU性能分析,Heap Profiler用于堆内存分析等。</li><li>gperftools:是 Google Performance Tools 的开源实现,提供了一系列的性能分析工具,如性能统计、CPU剖析、内存剖析等功能。</li><li>Nginx-systemtap-toolkit:一个开源工具集,用于Nginx服务器的性能实时分析和监控,当然,它也适用于其他C/C++应用程序。</li><li>Flame Graph:由 Brendan Gregg 开发的一款可视化分析工具,非常适用于 C/C++ 程序的 CPU 性能分析,它可以生成直观的火焰图来展示函数的调用关系及CPU使用情况。</li><li>Perf:Linux内核自带的性能分析工具,它以性能事件采样为基础,不仅可以分析系统的各种事件和内核性能,还可以用来分析指定应用程序的性能问题。</li><li>Gprof:GNU binutils工具集中的性能分析工具,可以根据应用程序的特定事件来采样,并生成分析报告,报告内容包括每个函数的调用次数、函数执行时间等。</li><p>服务器性能问题通常可以从以下几个方面入手优化:</p><li>算法与数据结构:选择时间复杂度低的算法,使用合适的数据结构提高存取效率</li><li>异步化:将串行的阻塞调用改为并行的异步调用,提高系统的并发度</li><li>缓存:将不易变的、访问频繁的数据缓存在内存中,减少磁盘和网络I/O</li><li>数据压缩:对传输的数据进行压缩,减少网络带宽占用</li><li>消息中间件:使用消息队列异步解耦生产者和消费者,削峰填谷</li><li>垂直扩展:提高单机配置如CPU、内存等,充分发挥单机的性能</li><li>水平扩展:增加服务器数量,使用负载均衡技术分摊请求压力</li><p>四、代码优化实践</p><p>除了架构层面的优化,游戏服务器的代码质量也直接影响着系统性能。需要开发者提高代码的质量意识,并掌握必要的代码优化技巧。一些好的实践包括:</p><li>复杂度控制:控制函数的代码行数、分支数,降低圈复杂度,提高代码的可读性和可维护性</li><li>编码规范:统一的编码规范有助于避免潜在的性能问题,如尽量在循环体外进行内存分配,避免频繁申请和释放内存</li><li>内存管理:尽量避免内存泄漏,及时释放不再使用的内存;对于频繁使用的对象,考虑使用内存池避免频繁分配和释放</li><li>局部变量:尽量使用局部变量,避免多次访问类的属性</li><li>位运算:使用位运算代替乘除法,如用 x>>1 代替 x/2</li><li>inline内联函数:对于一些简短的、频繁调用的函数,考虑使用inline内联优化,减少函数调用开销</li><li>基本类型传参:对于一些内置的基本类型如int、double等,尽量通过值传参,而不是const引用,避免引用解引用的开销</li><li>IO优化:使用缓冲区读写数据,避免频繁的IO系统调用;考虑使用内存映射文件等技术,提高文件读写效率</li><li>STL容器:慎重选择STL容器,如 map 的查找效率高但插入删除效率低,vector 的随机存取效率高但插入删除效率低,根据实际需求选择</li><p>总之,游戏服务器性能优化需要开发者、架构师、运维等各方通力合作,从代码、架构、系统、网络等各个层面入手,不断评估和改进。只有建立科学的性能优化流程,运用各种优化工具和经验,才能实现服务器的高性能和高可用。对于C++开发的服务器程序,还需要特别注意内存管理、异常处理等方面的问题,规范化的工程实践也是保证高性能的重要基础。</p><p></p>"
}